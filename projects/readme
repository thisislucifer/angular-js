Section 01: 

    Activity 04: File Structure - 
    1. bottom-4 files : Type script configs. In angular we write in TypeScript.
    2. Readme - Basic help provided. 
    3. package.json - Includes most crucial information like (name of project, versioning, type of scripts that you, dependencies)
    4. angular.json - Angular configuration files
    5. .editorconfig - How my editor works.
    6. e2e/(folder) - For testers.
    7. src/(folder) - All the dev stuff goes in here. 
    
Section 04: (Core-Angular things)
    1. <base href="/" /> - Allows the angular app to consider what is the base reference URL. (E.g When we sometimes click on Logo of website it takes to base page of website)
    2. platformBrowserDynamic().bootstrapModule() - This module is a method which expects to provide the very first file to load-up when the application starts .
                                                Load-up program into memeory.
    3. hierarchy - 
    Team -> Module -> component
        Eg for module - Authentication Module, Comment module, HomePage, etc 
        Eg. of Component - An authentication module wll have - Sign-up, Sign-in
    Note - Every App has multiple Module and Every Module has multiple components. And Each module is handled by a team in App.
    4. Create a component - 

Section 05: (Routing)
    1. When routing is enabled, on new file in src/app named "app-routing.module.ts" is generated. This is the file where entirety of
        the routing is dependent.
    2. In Routes[] - It takes array of objects of path. Each {}obj takes arg like - where to go(route) and which component to load-up 
        after hitting the route.

Section 06: [ (3rd party module), (passing data from parent component to Child), Tic-Tac-Toe App]
    1. Create component using ng cli - >
        syntax : ng generate component components/component-name < this is path of single-component>
    2. Whenever a new thing comes , the app.module is the first to know, hence when we create a new component using ng cli, 
        a component is create alongside updating the app.module.ts file.
    3. To delete a component - > 
        a. Delete the folder of component-name.
        b. Go to app.module.ts : delete the import line of component-name.
        c. in app.module.ts : delete the component-name from declaration part.
    4. In Html file, Angular does not treats anything inside " " as string but as variable name declared in .ts file
        If you still want to pass it as string, wrap it up inside ' ' . 
        eg. <div *ngSwitchCase=" 'empty' ">
    5. ()=""  --> Event binding
       []=""  --> Property binding
       ([]) = "" --> Two-way binding

Section 07: [RxJS]
    1. Problem RxJS is trying to solve - How to handle async calls with multiple events. 
    2. Observable - Anything that you want to observe for a limited period of time.
    3. In order to Observe an event, we can achieve this by other way "fromEvent" which also observes to an event that we mention.
    4. from() - Can convert anthing into an Observable.

Section 08: [Forms, To-Do app]
    1. Services are responsible for manipulating the data.
    2. Create service command - 
    ng generate service <path/to/service/with/name>
    3. Model - Model is nothing but a good paractice to have which tells how my application
        is going to be (like a basic template).
    4. Any modification in data can be done through services. Services can be considered as
        part where you can keep all the business logic so that your component dont care
        what happens with data and all the other things are not affected by it.
        @injectable decorator - Is use to inject this data at root level.   
    5. As soon as any component fired, the ngOnInit method is fired up automatically.
    6. Forms Types- 
        a. Reactive
        b. template driven
        c. NgForms
        ref - https://medium.com/swlh/have-you-ever-been-confused-between-using-a-template-driven-or-reactive-form-angular-87673cf5b417

Section 10: [APIs, Random-card App]
    1. Whenever we request an API using HTTP-client, behind the scenes HTTP client makes the servier request(API request) a simple obesrvable. That means whatever we will get back from the API request call will be an observable. And yes, we can put a subscriber on that.
    2. By default, the HTTP client unsubscribes the API req call, hence we do not get fresh data after every fix interval of time. But this can be overided.
    3. Ref 06 video to understand how prop is passed from Parent to child will all the changes that are necessary.

Section 11: [APIs, Firebase]
    1. Integrate firebase into web-app. Ref link- https://firebase.google.com/docs/web/setup
    2. Router : 
        1. Just like href, [routerLink] is a propery in angular. These routerLink are configured from router file.
        2. format of [routerLink] = "['/routeToVisit']"
    3. In-order to detect the change in Grand-child and Grand-parent, angular has provided api. 
        1. changeDetectRef - https://angular.io/api/core/ChangeDetectorRef
    4. OnChanges - A lifecycle hook that is called when any data-bound property of a directive changes. Define an ngOnChanges() method to handle the changes.
    5. NgForms : It is another(Angular) way of having forms. In order to use the NgForms, import it in .ts file of component. 
        NgForms when used, returns a object. This returned object is catched in onSubmit() method. 
       In .html file : <form (ngSubmit)="onSubmit(f)" #f="ngForm">
    6. Note- Order of the routes provided in app-routing.module.ts is 101% important.
    7. 


Notes: 
Ref : https://www.youtube.com/watch?v=N8FBmB2jme8&list=PLC3y8-rFHvwhBRAgFinJR8KHIrCdTkZcZ&index=6
A. Propoerty Binding :
    1. Attributes Vs Properties : 
        a. Attributes and properties are not the same.
        b. Attributes are defined by - HTML 
        c. Properties are defined by - DOM
        d. Attributes intialize DOM properties and then they are done. Attributes values cannot be changed once they are initilized.
        e. Property values can be changed.
    
    2. Property Binding is nothing but using the attribute of a HTML <tag> as a property to set value. 
        eg. <input [id]="myId" type="text"> (..here, "id" is HTML Attri which we use it as prop to set a value from our .js file)

B. Class Binding :
    1. A derective is nothing but a custom HTML-attribute that angular provides. (eg. [ngClass]="")

C. Style Binding : 
    1. In Angular, style binding is used to apply inline styles to HTML elements. 
    2. Style Binding is similar to class-binding.
    3. Syntax : <h2 [style.cssProp]="'value'">Sample</h2>
    4. We can also bing custom style using derective "[ngStyle]" .
        syntax : 
                <h2 [ngStyle]={{SomeObject}}>Sample</h2>
                var SomeObject = {
                    color : 'orange',
                    fontStyle : 'italic'
                    }

D. Event Binding : 
    1. $event : It is a special varaible for angular which gives details about the DOM event that was raised.

E. Template Reference Variables : 
    Eg - There is a form and you want to log the input provided name of user on sumbitting the form. In succh scenario "Template Reference Variables" can be used. Ref below code syntax.
    Syntax : 
    <input #inRefVar type="text">
    <button (click)="logMsg(inRefVar.value)">Log</button>

F. Two-way Binding : 
    1. It allows us to update a property and at the same-time display the updated value of that property.
    2. For this angular also provides a derective "[(ngModel)]"
